{"name":"ML assessment","tagline":"Machine Learning Coursera assessment","body":"\r\n***\r\n# Predicting type of exercise with wereable devices\r\n\r\n### Synopsis\r\n\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it.\r\n\r\nIn this project, the goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the **Weight Lifting Exercise Dataset**).\r\n\r\nThe goal of this project is to predict the manner in which the participants did the exercise. This is the “**classe**” variable in the training set.\r\n\r\n### Methodology\r\n\r\nAccording to the principles of cross-validation, the data was preprocessed to find the relevant variables and format the data so that a classifier could be run on it.\r\n\r\nWe then perform random forest on the training dataset and confirm the validity of the model on the testing dataset. Finally we use the fitted model to predict the \"classe\" variable of 20 cases on a **Test data** available here: https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\r\n\r\n### Data Preprocessing\r\n\r\nThe original dataset has 160 variables including the “classe” variable that indicates the exercise type of the participant’s activity. To reduce dimensionality, only the most useful predictors were selected. This was accomplished by eliminating variables that had too many NAs, non-numeric variables, variables that had too few unique values, and finally variables that had near-zero values.\r\n\r\n```{r,cache=TRUE,message=FALSE}\r\nlibrary(randomForest)\r\nlibrary(caret)\r\nlibrary(dplyr)\r\n\r\n## Split training dataset\r\nset.seed(1234)\r\ntrainDF <- read.csv(\"pml-training.csv\",header=T)\r\npartition <- createDataPartition(trainDF$classe, p=0.75, list = FALSE)\r\ntrain <- trainDF[partition,]\r\ntest <- trainDF[-partition,]\r\n\r\n## NA variables removal\r\ntraining <- train[, which(as.numeric(colSums(is.na(train)))==0)]\r\n\r\n## Non relevant variables removal\r\ntraining <- training[,-(1:7)]\r\n\r\n## Near zero variables removal\r\nlast <- ncol(training)\r\ntraining[,-last] <- data.frame(sapply(training[,-last],as.numeric))\r\nnearZero <- nearZeroVar(training[,-last])\r\ntraining <- training[,-nearZero]\r\n```\r\n\r\n### Fit of random forest by variables importance\r\n\r\nWe fit a random forest model for the training dataset:\r\n\r\n```{r,cache=TRUE}\r\nfitMod<- randomForest(classe~., data=training, mtry=10, importance=T)\r\nfitMod\r\n```\r\n\r\nAnd study the importance of the variables:\r\n\r\n```{r}\r\nvarI <- varImp(fitMod)\r\nvarI <- mutate(varI, Variable=rownames(varI))\r\nvarI <- mutate(varI, Importance=A+B+C+D+E)\r\nvarI <- varI[,6:7]\r\nvarI <- arrange(varI,Importance)\r\nvarI <- varI[34:52,]\r\nvarI$Variable <- factor(varI$Variable, levels=varI$Variable, ordered = TRUE)\r\nggplot(varI, aes(x=Variable,y=Importance,color=Importance,fill=Importance)) + \r\n      geom_bar(stat='identity') + coord_flip() + scale_color_gradient()\r\n```\r\n\r\nAfter adding the importance of the variables for each \"classe\" response we decided to drop off variables with a total importance under 120, so I reduced the training set further by subsetting for only the top 19 important variables.\r\n\r\n```{r}\r\nbest <- as.character(varI[,1])\r\nbest[20] <- \"classe\"\r\nbestTraining <- training[,best]\r\nbestTesting <- test[,best]\r\n```\r\n\r\nNow that the best predictors had been identified, the reduced training set was again fitted with the random forest model and the model was then run on the testing set. We also created a confusion matrix to see the accuracy of our results.\r\n\r\n```{r,cache=TRUE}\r\nfitModBest<- randomForest(classe~., data=bestTraining, mtry=10, importance=T)\r\nfitModBest\r\ntest.matrix<-confusionMatrix(bestTesting$classe,predict(fitModBest,bestTesting))\r\ntest.matrix$table\r\ntest.matrix$overall[1:4]\r\n```\r\n\r\n### Final test set classification\r\n\r\nFinally, the test set is preprocessed and classified by the model.\r\n\r\n```{r,cache=TRUE}\r\ntestDF <- read.csv(\"pml-testing.csv\",header=T)\r\nprob<-names(testDF)\r\nprob[160]<-\"classe\"\r\nnames(testDF)<-prob\r\ntestDF<-testDF[,best]\r\npredict(fitModBest,testDF)\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}